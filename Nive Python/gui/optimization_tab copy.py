def remove_telemetry(self):
    """Remover Telemetria usando o m√≥dulo RemoverTelemetria"""
    if not self.confirm_operation(
        "Remover Telemetria",
        "Esta opera√ß√£o ir√° remover sistemas de telemetria e coleta de dados:\n\n"
        "‚Ä¢ Desabilitar telemetria do Windows\n"
        "‚Ä¢ Remover metadados de dispositivos da rede\n"
        "‚Ä¢ Desabilitar Customer Experience Improvement Program\n"
        "‚Ä¢ Desabilitar Application Compatibility tracking\n"
        "‚Ä¢ Desabilitar AutoLoggers de diagn√≥stico\n"
        "‚Ä¢ Desabilitar Windows SmartScreen\n"
        "‚Ä¢ Desabilitar controle da Assist√™ncia Remota\n"
        "‚Ä¢ Desabilitar ofertas do Malicious Software Removal Tool\n\n"
        "‚ö†Ô∏è Esta fun√ß√£o √© IRREVERS√çVEL sem um ponto de restaura√ß√£o!\n"
        "‚ö†Ô∏è Execute como Administrador para melhores resultados!\n\n"
        "Deseja continuar?",
    ):
        return

    # Verificar se o m√≥dulo est√° dispon√≠vel
    if RemoverTelemetria is None:
        messagebox.showerror(
            "Erro",
            "M√≥dulo de remo√ß√£o de telemetria n√£o encontrado!\n\n"
            "Verifique se o arquivo 'core/remover_telemetria.py' existe.",
        )
        return

    # Criar janela de progresso
    progress_window, status_label, progress_bar, log_text = self.show_progress_dialog(
        "Removendo Telemetria"
    )

    def run_telemetry_removal():
        """Executar remo√ß√£o de telemetria em thread separada"""
        try:
            # Criar logger personalizado para capturar as mensagens
            class ProgressLogger:
                def __init__(self, log_widget):
                    self.log_widget = log_widget

                def log(self, message):
                    # Atualizar o log text widget de forma thread-safe
                    self.log_widget.after(0, lambda: self.update_log(message))

                def update_log(self, message):
                    self.log_widget.insert(tk.END, message + "\n")
                    self.log_widget.see(tk.END)
                    self.log_widget.update()

            # Criar removedor de telemetria com logger personalizado
            progress_logger = ProgressLogger(log_text)
            removedor = RemoverTelemetria(logger=progress_logger)

            # Atualizar status
            status_label.after(
                0, lambda: status_label.config(text="Removendo telemetria...")
            )

            # Executar remo√ß√£o
            success, sucessos, erros = removedor.executar_remocao_completa()

            # Mostrar resultado final
            def show_result():
                progress_bar.stop()

                if success and len(erros) == 0:
                    status_label.config(text="‚úÖ Telemetria removida com sucesso!")
                    result_message = f"üéâ TELEMETRIA REMOVIDA COM SUCESSO!\n\n"
                    result_message += f"‚úÖ {len(sucessos)} configura√ß√µes aplicadas\n\n"
                    result_message += "üîí PRIVACIDADE MELHORADA:\n"
                    result_message += "‚Ä¢ Telemetria do Windows desabilitada\n"
                    result_message += "‚Ä¢ Coleta de dados interrompida\n"
                    result_message += "‚Ä¢ Tracking de aplica√ß√µes desabilitado\n"
                    result_message += "‚Ä¢ SmartScreen desabilitado\n"
                    result_message += "‚Ä¢ AutoLoggers de diagn√≥stico parados\n\n"
                    result_message += "‚ö†Ô∏è IMPORTANTE: Reinicie o sistema para aplicar todas as mudan√ßas!"

                    # Fechar janela de progresso ap√≥s 3 segundos
                    progress_window.after(3000, progress_window.destroy)

                    messagebox.showinfo("Telemetria Removida", result_message)

                elif len(sucessos) > len(erros):
                    status_label.config(text="‚ö†Ô∏è Conclu√≠do com alguns avisos")
                    result_message = f"‚ö†Ô∏è TELEMETRIA PARCIALMENTE REMOVIDA\n\n"
                    result_message += f"‚úÖ Sucessos: {len(sucessos)}\n"
                    result_message += f"‚ö†Ô∏è Avisos/Erros: {len(erros)}\n\n"
                    result_message += (
                        "üîí A maior parte da telemetria foi desabilitada.\n\n"
                    )
                    result_message += "Detalhes dos erros:\n"
                    for erro in erros[:5]:  # Mostrar apenas os primeiros 5 erros
                        result_message += f"‚Ä¢ {erro}\n"
                    if len(erros) > 5:
                        result_message += f"... e mais {len(erros) - 5} erros\n"
                    result_message += "\n‚ö†Ô∏è IMPORTANTE: Reinicie o sistema!"

                    progress_window.after(2000, progress_window.destroy)
                    messagebox.showwarning("Remo√ß√£o Parcial", result_message)

                else:
                    status_label.config(text="‚ùå Conclu√≠do com v√°rios erros")
                    result_message = f"‚ùå MUITOS ERROS NA REMO√á√ÉO\n\n"
                    result_message += f"‚úÖ Sucessos: {len(sucessos)}\n"
                    result_message += f"‚ùå Erros: {len(erros)}\n\n"
                    result_message += "Principais erros:\n"
                    for erro in erros[:3]:
                        result_message += f"‚Ä¢ {erro}\n"
                    result_message += (
                        f"\nVerifique se est√° executando como Administrador!"
                    )

                    progress_window.after(2000, progress_window.destroy)
                    messagebox.showerror("Erros na Remo√ß√£o", result_message)

                # Log da atividade
                self.log_activity(
                    f"Remo√ß√£o de telemetria: {len(sucessos)} sucessos, {len(erros)} erros"
                )

            # Agendar para thread principal
            progress_window.after(500, show_result)

        except Exception as e:

            def show_error():
                progress_bar.stop()
                status_label.config(text="‚ùå Erro cr√≠tico")
                progress_window.after(1000, progress_window.destroy)
                messagebox.showerror(
                    "Erro Cr√≠tico", f"Erro cr√≠tico durante a remo√ß√£o:\n\n{str(e)}"
                )
                self.log_activity(f"Erro cr√≠tico na remo√ß√£o de telemetria: {str(e)}")

            progress_window.after(0, show_error)

    # Executar em thread separada para n√£o travar a interface
    thread = threading.Thread(target=run_telemetry_removal, daemon=True)
    thread.start()

    def remove_unused_features(self):
        """Remover Features N√£o Usadas usando o m√≥dulo RemoverFeatures"""

    if not self.confirm_operation(
        "Remover Features N√£o Usadas",
        "Esta opera√ß√£o ir√° remover recursos e funcionalidades n√£o utilizadas:\n\n"
        "‚Ä¢ Desabilitar IIS e componentes web\n"
        "‚Ä¢ Remover Message Queue (MSMQ)\n"
        "‚Ä¢ Desabilitar WCF e recursos de desenvolvimento\n"
        "‚Ä¢ Remover Hyper-V (se n√£o utilizado)\n"
        "‚Ä¢ Remover apps opcionais (WordPad, IE, etc.)\n"
        "‚Ä¢ Desabilitar protocolo SMB1 (inseguro)\n"
        "‚Ä¢ Remover recursos de rede avan√ßados\n"
        "‚Ä¢ E outras funcionalidades raramente usadas...\n\n"
        "‚ö†Ô∏è Esta fun√ß√£o √© IRREVERS√çVEL sem um ponto de restaura√ß√£o!\n"
        "‚ö†Ô∏è Execute como Administrador para melhores resultados!\n\n"
        "Deseja continuar?",
    ):
        return

    # Verificar se o m√≥dulo est√° dispon√≠vel
    if RemoverFeatures is None:
        messagebox.showerror(
            "Erro",
            "M√≥dulo de remo√ß√£o de features n√£o encontrado!\n\n"
            "Verifique se o arquivo 'core/remover_features.py' existe.",
        )
        return

    # Criar janela de progresso
    progress_window, status_label, progress_bar, log_text = self.show_progress_dialog(
        "Removendo Features N√£o Usadas"
    )

    def run_features_removal():
        """Executar remo√ß√£o de features em thread separada"""
        try:
            # Criar logger personalizado para capturar as mensagens
            class ProgressLogger:
                def __init__(self, log_widget):
                    self.log_widget = log_widget

                def log(self, message):
                    # Atualizar o log text widget de forma thread-safe
                    self.log_widget.after(0, lambda: self.update_log(message))

                def update_log(self, message):
                    self.log_widget.insert(tk.END, message + "\n")
                    self.log_widget.see(tk.END)
                    self.log_widget.update()

            # Criar removedor de features com logger personalizado
            progress_logger = ProgressLogger(log_text)
            removedor = RemoverFeatures(logger=progress_logger)

            # Atualizar status
            status_label.after(
                0,
                lambda: status_label.config(
                    text="Removendo features n√£o utilizadas..."
                ),
            )

            # Executar remo√ß√£o
            success, sucessos, erros = removedor.executar_remocao_features()

            # Mostrar resultado final
            def show_result():
                progress_bar.stop()

                if success and len(erros) == 0:
                    status_label.config(text="‚úÖ Features removidas com sucesso!")
                    result_message = f"üéâ FEATURES REMOVIDAS COM SUCESSO!\n\n"
                    result_message += f"‚úÖ {len(sucessos)} configura√ß√µes aplicadas\n\n"
                    result_message += "üóëÔ∏è RECURSOS REMOVIDOS:\n"
                    result_message += "‚Ä¢ IIS e componentes web desabilitados\n"
                    result_message += "‚Ä¢ Apps opcionais removidos\n"
                    result_message += "‚Ä¢ Recursos de rede avan√ßados desabilitados\n"
                    result_message += "‚Ä¢ Protocolo SMB1 desabilitado\n"
                    result_message += "‚Ä¢ Features de desenvolvimento removidas\n\n"
                    result_message += "‚ö†Ô∏è IMPORTANTE: Reinicie o sistema para aplicar todas as mudan√ßas!"

                    # Fechar janela de progresso ap√≥s 3 segundos
                    progress_window.after(3000, progress_window.destroy)

                    messagebox.showinfo("Features Removidas", result_message)

                elif len(sucessos) > len(erros):
                    status_label.config(text="‚ö†Ô∏è Conclu√≠do com alguns avisos")
                    result_message = f"‚ö†Ô∏è FEATURES PARCIALMENTE REMOVIDAS\n\n"
                    result_message += f"‚úÖ Sucessos: {len(sucessos)}\n"
                    result_message += f"‚ö†Ô∏è Avisos/Erros: {len(erros)}\n\n"
                    result_message += "üóëÔ∏è A maior parte das features foi removida.\n\n"
                    result_message += "Detalhes dos erros:\n"
                    for erro in erros[:5]:  # Mostrar apenas os primeiros 5 erros
                        result_message += f"‚Ä¢ {erro}\n"
                    if len(erros) > 5:
                        result_message += f"... e mais {len(erros) - 5} erros\n"
                    result_message += "\n‚ö†Ô∏è IMPORTANTE: Reinicie o sistema!"

                    progress_window.after(2000, progress_window.destroy)
                    messagebox.showwarning("Remo√ß√£o Parcial", result_message)

                else:
                    status_label.config(text="‚ùå Conclu√≠do com v√°rios erros")
                    result_message = f"‚ùå MUITOS ERROS NA REMO√á√ÉO\n\n"
                    result_message += f"‚úÖ Sucessos: {len(sucessos)}\n"
                    result_message += f"‚ùå Erros: {len(erros)}\n\n"
                    result_message += "Principais erros:\n"
                    for erro in erros[:3]:
                        result_message += f"‚Ä¢ {erro}\n"
                    result_message += (
                        f"\nVerifique se est√° executando como Administrador!"
                    )

                    progress_window.after(2000, progress_window.destroy)
                    messagebox.showerror("Erros na Remo√ß√£o", result_message)

                # Log da atividade
                self.log_activity(
                    f"Remo√ß√£o de features: {len(sucessos)} sucessos, {len(erros)} erros"
                )

            # Agendar para thread principal
            progress_window.after(500, show_result)

        except Exception as e:

            def show_error():
                progress_bar.stop()
                status_label.config(text="‚ùå Erro cr√≠tico")
                progress_window.after(1000, progress_window.destroy)
                messagebox.showerror(
                    "Erro Cr√≠tico", f"Erro cr√≠tico durante a remo√ß√£o:\n\n{str(e)}"
                )
                self.log_activity(f"Erro cr√≠tico na remo√ß√£o de features: {str(e)}")

            progress_window.after(0, show_error)

    # Executar em thread separada para n√£o travar a interface
    thread = threading.Thread(target=run_features_removal, daemon=True)
    thread.start()

    def remove_animations(self):
        """Remover Anima√ß√µes usando o m√≥dulo RemoverAnimacoes"""
        if not self.confirm_operation(
            "Remover Anima√ß√µes Desnecess√°rias",
            "Esta opera√ß√£o ir√° desabilitar anima√ß√µes e efeitos visuais:\n\n"
            "‚Ä¢ Desabilitar anima√ß√µes de janelas\n"
            "‚Ä¢ Remover efeitos visuais avan√ßados\n"
            "‚Ä¢ Desabilitar anima√ß√µes da barra de tarefas\n"
            "‚Ä¢ Otimizar arrastar janelas\n"
            "‚Ä¢ Desabilitar transpar√™ncias desnecess√°rias\n"
            "‚Ä¢ Remover sombras em listas\n"
            "‚Ä¢ Otimizar suaviza√ß√£o de fontes\n"
            "‚Ä¢ E outras otimiza√ß√µes visuais...\n\n"
            "‚ö†Ô∏è Esta fun√ß√£o √© IRREVERS√çVEL sem um ponto de restaura√ß√£o!\n"
            "‚ö†Ô∏è Execute como Administrador para melhores resultados!\n\n"
            "Deseja continuar?",
        ):
            return

    # Verificar se o m√≥dulo est√° dispon√≠vel
    if RemoverAnimacoes is None:
        messagebox.showerror(
            "Erro",
            "M√≥dulo de remo√ß√£o de anima√ß√µes n√£o encontrado!\n\n"
            "Verifique se o arquivo 'core/remover_animacoes.py' existe.",
        )
        return

    # Criar janela de progresso
    progress_window, status_label, progress_bar, log_text = self.show_progress_dialog(
        "Removendo Anima√ß√µes"
    )

    def run_animations_removal():
        """Executar remo√ß√£o de anima√ß√µes em thread separada"""
        try:
            # Criar logger personalizado para capturar as mensagens
            class ProgressLogger:
                def __init__(self, log_widget):
                    self.log_widget = log_widget

                def log(self, message):
                    # Atualizar o log text widget de forma thread-safe
                    self.log_widget.after(0, lambda: self.update_log(message))

                def update_log(self, message):
                    self.log_widget.insert(tk.END, message + "\n")
                    self.log_widget.see(tk.END)
                    self.log_widget.update()

            # Criar removedor de anima√ß√µes com logger personalizado
            progress_logger = ProgressLogger(log_text)
            removedor = RemoverAnimacoes(logger=progress_logger)

            # Atualizar status
            status_label.after(
                0, lambda: status_label.config(text="Desabilitando anima√ß√µes...")
            )

            # Executar remo√ß√£o
            success, sucessos, erros = removedor.executar_remocao_animacoes()

            # Mostrar resultado final
            def show_result():
                progress_bar.stop()

                if success and len(erros) == 0:
                    status_label.config(text="‚úÖ Anima√ß√µes desabilitadas com sucesso!")
                    result_message = f"üéâ ANIMA√á√ïES REMOVIDAS COM SUCESSO!\n\n"
                    result_message += f"‚úÖ {len(sucessos)} configura√ß√µes aplicadas\n\n"
                    result_message += "üé® MELHORIAS APLICADAS:\n"
                    result_message += "‚Ä¢ Anima√ß√µes de janelas desabilitadas\n"
                    result_message += "‚Ä¢ Efeitos visuais otimizados\n"
                    result_message += "‚Ä¢ Barra de tarefas mais responsiva\n"
                    result_message += "‚Ä¢ Transpar√™ncias desnecess√°rias removidas\n"
                    result_message += "‚Ä¢ Sistema mais r√°pido e fluido\n\n"
                    result_message += "‚ö†Ô∏è IMPORTANTE: Reinicie ou fa√ßa logoff/login para aplicar todas as mudan√ßas!"

                    # Fechar janela de progresso ap√≥s 3 segundos
                    progress_window.after(3000, progress_window.destroy)

                    messagebox.showinfo("Anima√ß√µes Removidas", result_message)

                elif len(sucessos) > len(erros):
                    status_label.config(text="‚ö†Ô∏è Conclu√≠do com alguns avisos")
                    result_message = f"‚ö†Ô∏è ANIMA√á√ïES PARCIALMENTE REMOVIDAS\n\n"
                    result_message += f"‚úÖ Sucessos: {len(sucessos)}\n"
                    result_message += f"‚ö†Ô∏è Avisos/Erros: {len(erros)}\n\n"
                    result_message += (
                        "üé® A maior parte das anima√ß√µes foi desabilitada.\n\n"
                    )
                    result_message += "Detalhes dos erros:\n"
                    for erro in erros[:5]:  # Mostrar apenas os primeiros 5 erros
                        result_message += f"‚Ä¢ {erro}\n"
                    if len(erros) > 5:
                        result_message += f"... e mais {len(erros) - 5} erros\n"
                    result_message += "\n‚ö†Ô∏è IMPORTANTE: Reinicie o sistema!"

                    progress_window.after(2000, progress_window.destroy)
                    messagebox.showwarning("Remo√ß√£o Parcial", result_message)

                else:
                    status_label.config(text="‚ùå Conclu√≠do com v√°rios erros")
                    result_message = f"‚ùå MUITOS ERROS NA REMO√á√ÉO\n\n"
                    result_message += f"‚úÖ Sucessos: {len(sucessos)}\n"
                    result_message += f"‚ùå Erros: {len(erros)}\n\n"
                    result_message += "Principais erros:\n"
                    for erro in erros[:3]:
                        result_message += f"‚Ä¢ {erro}\n"
                    result_message += (
                        f"\nVerifique se est√° executando como Administrador!"
                    )

                    progress_window.after(2000, progress_window.destroy)
                    messagebox.showerror("Erros na Remo√ß√£o", result_message)

                # Log da atividade
                self.log_activity(
                    f"Remo√ß√£o de anima√ß√µes: {len(sucessos)} sucessos, {len(erros)} erros"
                )

            # Agendar para thread principal
            progress_window.after(500, show_result)

        except Exception as e:

            def show_error():
                progress_bar.stop()
                status_label.config(text="‚ùå Erro cr√≠tico")
                progress_window.after(1000, progress_window.destroy)
                messagebox.showerror(
                    "Erro Cr√≠tico", f"Erro cr√≠tico durante a remo√ß√£o:\n\n{str(e)}"
                )
                self.log_activity(f"Erro cr√≠tico na remo√ß√£o de anima√ß√µes: {str(e)}")

            progress_window.after(0, show_error)

    # Executar em thread separada para n√£o travar a interface
    thread = threading.Thread(target=run_animations_removal, daemon=True)
    thread.start()

    def disable_web_search(self):
        if self.confirm_operation(
            "Desabilitar Busca Web",
            "Esta opera√ß√£o ir√° desabilitar a busca online na barra de pesquisa.\n\n"
            "‚ö†Ô∏è Esta fun√ß√£o √© IRREVERS√çVEL sem um ponto de restaura√ß√£o!\n\n"
            "Deseja continuar?",
        ):
            try:
                # Desabilitar BingSearch
                key = winreg.OpenKey(
                    winreg.HKEY_CURRENT_USER,
                    r"Software\Microsoft\Windows\CurrentVersion\Search",
                    0,
                    winreg.KEY_SET_VALUE,
                )
                winreg.SetValueEx(key, "BingSearchEnabled", 0, winreg.REG_DWORD, 0)
                winreg.CloseKey(key)

                # Desabilitar SearchBox Suggestions
                key = winreg.CreateKey(
                    winreg.HKEY_CURRENT_USER,
                    r"SOFTWARE\Policies\Microsoft\Windows\Explorer",
                )
                winreg.SetValueEx(
                    key, "DisableSearchBoxSuggestions", 0, winreg.REG_DWORD, 1
                )
                winreg.CloseKey(key)

                messagebox.showinfo("Sucesso", "Busca web desabilitada com sucesso!")
                self.log_activity("Busca web na barra de pesquisa desabilitada")

            except Exception as e:
                messagebox.showerror("Erro", f"Erro ao desabilitar busca web: {str(e)}")

    def disable_browser_cache(self):
        if self.confirm_operation(
            "Desabilitar Cache de Navegadores",
            "Esta opera√ß√£o ir√° otimizar o cache de navegadores e streaming.\n\n"
            "‚ö†Ô∏è Esta fun√ß√£o √© IRREVERS√çVEL sem um ponto de restaura√ß√£o!\n\n"
            "Deseja continuar?",
        ):
            self.execute_optimization("disable_browser_cache")

    def disable_lock_screen_ads(self):
        if self.confirm_operation(
            "Desabilitar Propagandas na Tela de Bloqueio",
            "Esta opera√ß√£o ir√° remover propagandas da tela de bloqueio.\n\n"
            "‚ö†Ô∏è Esta fun√ß√£o √© IRREVERS√çVEL sem um ponto de restaura√ß√£o!\n\n"
            "Deseja continuar?",
        ):
            try:
                # Desabilitar RotatingLockScreenOverlay
                key = winreg.OpenKey(
                    winreg.HKEY_CURRENT_USER,
                    r"Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager",
                    0,
                    winreg.KEY_SET_VALUE,
                )
                winreg.SetValueEx(
                    key, "RotatingLockScreenOverlayEnabled", 0, winreg.REG_DWORD, 0
                )
                winreg.SetValueEx(
                    key, "SubscribedContent-338387Enabled", 0, winreg.REG_DWORD, 0
                )
                winreg.CloseKey(key)

                messagebox.showinfo(
                    "Sucesso", "Propagandas na tela de bloqueio desabilitadas!"
                )
                self.log_activity("Propagandas na tela de bloqueio desabilitadas")

            except Exception as e:
                messagebox.showerror(
                    "Erro", f"Erro ao desabilitar propagandas: {str(e)}"
                )

    def optimize_edge(self):
        """Otimizar Microsoft Edge usando o m√≥dulo OtimizadorEdge"""

    if not self.confirm_operation(
        "Otimizar Microsoft Edge",
        "Esta opera√ß√£o ir√° aplicar otimiza√ß√µes espec√≠ficas para o Microsoft Edge:\n\n"
        "‚Ä¢ Desabilitar sidebar/bot√£o Bing\n"
        "‚Ä¢ Desabilitar execu√ß√£o em segundo plano\n"
        "‚Ä¢ Desabilitar inicializa√ß√£o autom√°tica\n"
        "‚Ä¢ Remover bot√£o de assinatura Acrobat\n"
        "‚Ä¢ Desabilitar geolocaliza√ß√£o por padr√£o\n"
        "‚Ä¢ Desabilitar acesso a sensores\n"
        "‚Ä¢ Desabilitar notifica√ß√µes de sites\n"
        "‚Ä¢ E outras otimiza√ß√µes de privacidade...\n\n"
        "‚ö†Ô∏è Esta fun√ß√£o √© IRREVERS√çVEL sem um ponto de restaura√ß√£o!\n"
        "‚ö†Ô∏è Execute como Administrador para melhores resultados!\n\n"
        "Deseja continuar?",
    ):
        return

    # Verificar se o m√≥dulo est√° dispon√≠vel
    if OtimizadorEdge is None:
        messagebox.showerror(
            "Erro",
            "M√≥dulo de otimiza√ß√£o do Edge n√£o encontrado!\n\n"
            "Verifique se o arquivo 'core/otimizar_edge.py' existe.",
        )
        return

    # Criar janela de progresso
    progress_window, status_label, progress_bar, log_text = self.show_progress_dialog(
        "Otimizando Microsoft Edge"
    )

    def run_edge_optimization():
        """Executar otimiza√ß√£o do Edge em thread separada"""
        try:
            # Criar logger personalizado para capturar as mensagens
            class ProgressLogger:
                def __init__(self, log_widget):
                    self.log_widget = log_widget

                def log(self, message):
                    # Atualizar o log text widget de forma thread-safe
                    self.log_widget.after(0, lambda: self.update_log(message))

                def update_log(self, message):
                    self.log_widget.insert(tk.END, message + "\n")
                    self.log_widget.see(tk.END)
                    self.log_widget.update()

            # Criar otimizador do Edge com logger personalizado
            progress_logger = ProgressLogger(log_text)
            otimizador = OtimizadorEdge(logger=progress_logger)

            # Atualizar status
            status_label.after(
                0, lambda: status_label.config(text="Otimizando Microsoft Edge...")
            )

            # Executar otimiza√ß√£o
            success, sucessos, erros = otimizador.executar_otimizacao_edge()

            # Mostrar resultado final
            def show_result():
                progress_bar.stop()

                if success and len(erros) == 0:
                    status_label.config(text="‚úÖ Edge otimizado com sucesso!")
                    result_message = f"üéâ MICROSOFT EDGE OTIMIZADO COM SUCESSO!\n\n"
                    result_message += f"‚úÖ {len(sucessos)} configura√ß√µes aplicadas\n\n"
                    result_message += "üåç OTIMIZA√á√ïES APLICADAS:\n"
                    result_message += "‚Ä¢ Sidebar/bot√£o Bing desabilitado\n"
                    result_message += "‚Ä¢ Execu√ß√£o em segundo plano removida\n"
                    result_message += "‚Ä¢ Inicializa√ß√£o autom√°tica desabilitada\n"
                    result_message += "‚Ä¢ Bot√µes desnecess√°rios removidos\n"
                    result_message += "‚Ä¢ Privacidade melhorada\n"
                    result_message += "‚Ä¢ Performance otimizada\n\n"
                    result_message += "‚ö†Ô∏è IMPORTANTE: Reinicie o Microsoft Edge para aplicar todas as mudan√ßas!"

                    # Fechar janela de progresso ap√≥s 3 segundos
                    progress_window.after(3000, progress_window.destroy)

                    messagebox.showinfo("Edge Otimizado", result_message)

                elif len(sucessos) > len(erros):
                    status_label.config(text="‚ö†Ô∏è Conclu√≠do com alguns avisos")
                    result_message = f"‚ö†Ô∏è EDGE PARCIALMENTE OTIMIZADO\n\n"
                    result_message += f"‚úÖ Sucessos: {len(sucessos)}\n"
                    result_message += f"‚ö†Ô∏è Avisos/Erros: {len(erros)}\n\n"
                    result_message += (
                        "üåç A maior parte das otimiza√ß√µes foi aplicada.\n\n"
                    )
                    result_message += "Detalhes dos erros:\n"
                    for erro in erros[:5]:  # Mostrar apenas os primeiros 5 erros
                        result_message += f"‚Ä¢ {erro}\n"
                    if len(erros) > 5:
                        result_message += f"... e mais {len(erros) - 5} erros\n"
                    result_message += "\n‚ö†Ô∏è IMPORTANTE: Reinicie o Edge!"

                    progress_window.after(2000, progress_window.destroy)
                    messagebox.showwarning("Otimiza√ß√£o Parcial", result_message)

                else:
                    status_label.config(text="‚ùå Conclu√≠do com v√°rios erros")
                    result_message = f"‚ùå MUITOS ERROS NA OTIMIZA√á√ÉO\n\n"
                    result_message += f"‚úÖ Sucessos: {len(sucessos)}\n"
                    result_message += f"‚ùå Erros: {len(erros)}\n\n"
                    result_message += "Principais erros:\n"
                    for erro in erros[:3]:
                        result_message += f"‚Ä¢ {erro}\n"
                    result_message += (
                        f"\nVerifique se est√° executando como Administrador!"
                    )

                    progress_window.after(2000, progress_window.destroy)
                    messagebox.showerror("Erros na Otimiza√ß√£o", result_message)

                # Log da atividade
                self.log_activity(
                    f"Otimiza√ß√£o do Edge: {len(sucessos)} sucessos, {len(erros)} erros"
                )

            # Agendar para thread principal
            progress_window.after(500, show_result)

        except Exception as e:

            def show_error():
                progress_bar.stop()
                status_label.config(text="‚ùå Erro cr√≠tico")
                progress_window.after(1000, progress_window.destroy)
                messagebox.showerror(
                    "Erro Cr√≠tico",
                    f"Erro cr√≠tico durante a otimiza√ß√£o:\n\n{str(e)}",
                )
                self.log_activity(f"Erro cr√≠tico na otimiza√ß√£o do Edge: {str(e)}")

            progress_window.after(0, show_error)

    # Executar em thread separada para n√£o travar a interface
    thread = threading.Thread(target=run_edge_optimization, daemon=True)
    thread.start()

    def accelerate_windows(self):
        """Acelerar Windows usando o m√≥dulo AceleradorWindows"""

    if not self.confirm_operation(
        "Acelerar Windows",
        "Esta opera√ß√£o ir√° aplicar 12 otimiza√ß√µes espec√≠ficas para acelerar o sistema:\n\n"
        "‚Ä¢ Otimiza√ß√£o de Boot\n"
        "‚Ä¢ Acelera√ß√£o do Menu Iniciar\n"
        "‚Ä¢ Aumento da Taxa de Upload\n"
        "‚Ä¢ Otimiza√ß√£o TCP/IP e DNS\n"
        "‚Ä¢ GPU Hardware Scheduling\n"
        "‚Ä¢ Modo Compacto no Explorer\n"
        "‚Ä¢ Desabilitar Apps em Background\n"
        "‚Ä¢ Otimiza√ß√£o para Jogos\n"
        "‚Ä¢ E outras melhorias...\n\n"
        "‚ö†Ô∏è Esta fun√ß√£o √© IRREVERS√çVEL sem um ponto de restaura√ß√£o!\n"
        "‚ö†Ô∏è Execute como Administrador para melhores resultados!\n\n"
        "Deseja continuar?",
    ):
        return

    # Verificar se o m√≥dulo est√° dispon√≠vel
    if AceleradorWindows is None:
        messagebox.showerror(
            "Erro",
            "M√≥dulo de acelera√ß√£o n√£o encontrado!\n\n"
            "Verifique se o arquivo 'core/acelerar_windows.py' existe.",
        )
        return

    # Criar janela de progresso
    progress_window, status_label, progress_bar, log_text = self.show_progress_dialog(
        "Acelerando Windows"
    )

    def run_acceleration():
        """Executar acelera√ß√£o em thread separada"""
        try:
            # Criar logger personalizado para capturar as mensagens
            class ProgressLogger:
                def __init__(self, log_widget):
                    self.log_widget = log_widget

                def log(self, message):
                    # Atualizar o log text widget de forma thread-safe
                    self.log_widget.after(0, lambda: self.update_log(message))

                def update_log(self, message):
                    self.log_widget.insert(tk.END, message + "\n")
                    self.log_widget.see(tk.END)
                    self.log_widget.update()

            # Criar acelerador com logger personalizado
            progress_logger = ProgressLogger(log_text)
            acelerador = AceleradorWindows(logger=progress_logger)

            # Atualizar status
            status_label.after(
                0, lambda: status_label.config(text="Aplicando otimiza√ß√µes...")
            )

            # Executar otimiza√ß√µes
            success, sucessos, erros = acelerador.executar_todas_otimizacoes()

            # Mostrar resultado final
            def show_result():
                progress_bar.stop()

                if success and len(erros) == 0:
                    status_label.config(text="‚úÖ Todas as otimiza√ß√µes foram aplicadas!")
                    result_message = f"üéâ SUCESSO COMPLETO!\n\n"
                    result_message += (
                        f"‚úÖ {len(sucessos)} otimiza√ß√µes aplicadas com sucesso\n\n"
                    )
                    result_message += "‚ö†Ô∏è IMPORTANTE: Reinicie o sistema para aplicar todas as mudan√ßas!"

                    # Fechar janela de progresso ap√≥s 3 segundos
                    progress_window.after(3000, progress_window.destroy)

                    messagebox.showinfo("Otimiza√ß√µes Conclu√≠das", result_message)

                elif len(sucessos) > len(erros):
                    status_label.config(text="‚ö†Ô∏è Conclu√≠do com alguns avisos")
                    result_message = f"‚ö†Ô∏è CONCLU√çDO COM AVISOS\n\n"
                    result_message += f"‚úÖ Sucessos: {len(sucessos)}\n"
                    result_message += f"‚ö†Ô∏è Avisos/Erros: {len(erros)}\n\n"
                    result_message += "Detalhes dos erros:\n"
                    for erro in erros[:5]:  # Mostrar apenas os primeiros 5 erros
                        result_message += f"‚Ä¢ {erro}\n"
                    if len(erros) > 5:
                        result_message += f"... e mais {len(erros) - 5} erros\n"
                    result_message += "\n‚ö†Ô∏è IMPORTANTE: Reinicie o sistema!"

                    progress_window.after(2000, progress_window.destroy)
                    messagebox.showwarning("Otimiza√ß√µes Conclu√≠das", result_message)

                else:
                    status_label.config(text="‚ùå Conclu√≠do com v√°rios erros")
                    result_message = f"‚ùå MUITOS ERROS ENCONTRADOS\n\n"
                    result_message += f"‚úÖ Sucessos: {len(sucessos)}\n"
                    result_message += f"‚ùå Erros: {len(erros)}\n\n"
                    result_message += "Principais erros:\n"
                    for erro in erros[:3]:
                        result_message += f"‚Ä¢ {erro}\n"
                    result_message += (
                        f"\nVerifique se est√° executando como Administrador!"
                    )

                    progress_window.after(2000, progress_window.destroy)
                    messagebox.showerror("Erros na Otimiza√ß√£o", result_message)

                # Log da atividade
                self.log_activity(
                    f"Acelera√ß√£o do Windows: {len(sucessos)} sucessos, {len(erros)} erros"
                )

            # Agendar para thread principal
            progress_window.after(500, show_result)

        except Exception as e:

            def show_error():
                progress_bar.stop()
                status_label.config(text="‚ùå Erro cr√≠tico")
                progress_window.after(1000, progress_window.destroy)
                messagebox.showerror(
                    "Erro Cr√≠tico",
                    f"Erro cr√≠tico durante a acelera√ß√£o:\n\n{str(e)}",
                )
                self.log_activity(f"Erro cr√≠tico na acelera√ß√£o: {str(e)}")

            progress_window.after(0, show_error)

    # Executar em thread separada para n√£o travar a interface
    thread = threading.Thread(target=run_acceleration, daemon=True)
    thread.start()  # gui/optimization_tab.py - Aba de otimiza√ß√£o NiveBoost


import tkinter as tk
from tkinter import messagebox
import ttkbootstrap as ttk_bs
from ttkbootstrap.constants import *
import winreg
import threading
import sys
import os

# Adicionar o diret√≥rio core ao path para importar o m√≥dulo
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(__file__)), "core"))

try:
    from core.acelerar_windows import AceleradorWindows
    from core.remover_telemetria import RemoverTelemetria
    from core.remover_features import RemoverFeatures
    from core.remover_animacoes import RemoverAnimacoes
    from core.otimizar_edge import OtimizadorEdge
    from core.desabilitar_tweaks import DesabilitadorTweaks  # NOVO M√ìDULO ADICIONADO
except ImportError:
    print("Aviso: M√≥dulos de otimiza√ß√£o n√£o encontrados na pasta core")
    AceleradorWindows = None
    RemoverTelemetria = None
    RemoverFeatures = None
    RemoverAnimacoes = None
    OtimizadorEdge = None
    DesabilitadorTweaks = None  # NOVO M√ìDULO ADICIONADO


class OptimizationTab:
    """Classe respons√°vel pela aba de otimiza√ß√£o NiveBoost"""

    def __init__(self, parent_interface):
        """Inicializar aba de otimiza√ß√£o"""
        self.parent = parent_interface
        self.system_commands = parent_interface.system_commands
        self.config = parent_interface.config
        self.logger = parent_interface.logger

    def create_optimization_tab(self, notebook):
        """Criar aba de otimiza√ß√£o com todas as 11 op√ß√µes do NiveBoost"""
        optimization_tab = ttk_bs.Frame(notebook)
        notebook.add(optimization_tab, text=f"{self.config.get_icon('zap')} Otimiza√ß√£o")

        # Container principal com scroll
        main_container = ttk_bs.Frame(optimization_tab)
        main_container.pack(fill=BOTH, expand=True)

        # Canvas e scrollbar para scroll vertical
        canvas = tk.Canvas(main_container)
        scrollbar = ttk_bs.Scrollbar(
            main_container, orient="vertical", command=canvas.yview
        )
        scrollable_frame = ttk_bs.Frame(canvas)

        scrollable_frame.bind(
            "<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # Container de conte√∫do
        container = ttk_bs.Frame(scrollable_frame, padding=20)
        container.pack(fill=BOTH, expand=True)

        # T√≠tulo da se√ß√£o
        title_label = ttk_bs.Label(
            container,
            text="NiveBoost - Ferramentas de Otimiza√ß√£o",
            font=("Arial", 18, "bold"),
            bootstyle="primary",
        )
        title_label.pack(pady=(0, 10))

        # Vers√£o
        version_label = ttk_bs.Label(
            container,
            text="Vers√£o 1.1.0",
            font=("Arial", 12),
            bootstyle="secondary",
        )
        version_label.pack(pady=(0, 20))

        # Menu Principal de Otimiza√ß√£o
        optimization_frame = ttk_bs.LabelFrame(
            container, text="Menu de Otimiza√ß√£o", padding=15
        )
        optimization_frame.pack(fill=BOTH, expand=True, pady=(0, 20))

        # Lista das 11 op√ß√µes de otimiza√ß√£o do NiveBoost
        optimization_options = [
            (
                "üîß Desabilitar Alguns Servi√ßos do Windows",
                self.disable_windows_services,
                "warning",
                "Desabilita servi√ßos desnecess√°rios para melhorar performance",
            ),
            (
                "üìÖ Desabilitar Tweaks de Tarefas Agendadas",
                self.disable_scheduled_tasks,
                "warning",
                "Remove tarefas agendadas que consomem recursos",
            ),
            (
                "üíæ Desabilitar Alguns Softwares do Windows",
                self.disable_windows_software,
                "warning",
                "Desabilita aplicativos e recursos desnecess√°rios",
            ),
            (
                "üïµÔ∏è Remover Telemetria e Coleta de Dados",
                self.remove_telemetry,
                "danger",
                "Remove sistemas de coleta de dados e telemetria",
            ),
            (
                "üóëÔ∏è Remover Features N√£o Usadas",
                self.remove_unused_features,
                "warning",
                "Remove recursos e funcionalidades n√£o utilizadas",
            ),
            (
                "üé® Remover Anima√ß√µes In√∫teis",
                self.remove_animations,
                "info",
                "Remove anima√ß√µes para melhorar a responsividade",
            ),
            (
                "üîç Desabilitar Busca Web na Barra de Pesquisa",
                self.disable_web_search,
                "info",
                "Desabilita busca online na barra de pesquisa do Windows",
            ),
            (
                "üåê Desabilitar Cache de Navegadores e Streaming",
                self.disable_browser_cache,
                "warning",
                "Otimiza cache de navegadores e servi√ßos de streaming",
            ),
            (
                "üîí Desabilitar Propagandas na Tela de Bloqueio",
                self.disable_lock_screen_ads,
                "success",
                "Remove propagandas e sugest√µes da tela de bloqueio",
            ),
            (
                "üåç Otimizar o Edge",
                self.optimize_edge,
                "primary",
                "Aplica otimiza√ß√µes espec√≠ficas para o Microsoft Edge",
            ),
            (
                "‚ö°Acelerar Windows",
                self.accelerate_windows,
                "success",
                "Aplica√ß√£o geral de otimiza√ß√µes para acelerar o sistema",
            ),
        ]

        # Criar bot√µes em lista vertical
        for i, (text, command, style, description) in enumerate(optimization_options):
            # Frame para cada op√ß√£o
            option_frame = ttk_bs.Frame(optimization_frame)
            option_frame.pack(fill=X, pady=5)

            # Bot√£o principal
            btn = ttk_bs.Button(
                option_frame, text=text, command=command, bootstyle=style, width=45
            )
            btn.pack(side=LEFT, padx=(0, 10))

            # Descri√ß√£o
            desc_label = ttk_bs.Label(
                option_frame,
                text=description,
                font=("Arial", 9),
                bootstyle="secondary",
                wraplength=300,
            )
            desc_label.pack(side=LEFT, anchor="w")

        # Aviso importante
        warning_frame = ttk_bs.LabelFrame(
            container,
            text="‚ö†Ô∏è IMPORTANTE - LEIA ANTES DE USAR",
            bootstyle="danger",
            padding=15,
        )
        warning_frame.pack(fill=X, pady=(20, 0))

        warning_text = """üî¥ ATEN√á√ÉO: Estas fun√ß√µes s√£o IRREVERS√çVEIS a n√£o ser que tenha criado um ponto de restaura√ß√£o!

üìã RECOMENDA√á√ïES OBRIGAT√ìRIAS:
‚Ä¢ Crie um ponto de restaura√ß√£o ANTES de usar qualquer fun√ß√£o
‚Ä¢ Leia as informa√ß√µes sobre cada otimiza√ß√£o antes de aplicar
‚Ä¢ N√£o execute mais de uma otimiza√ß√£o por vez
‚Ä¢ Execute como Administrador para melhores resultados
‚Ä¢ Reinicie o sistema ap√≥s aplicar as otimiza√ß√µes

‚ö†Ô∏è Use por sua conta e risco. Sempre fa√ßa backup do seu sistema!"""

        warning_label = ttk_bs.Label(
            warning_frame,
            text=warning_text,
            font=("Arial", 10),
            foreground="red",
            justify="left",
        )
        warning_label.pack(anchor="w")

        return optimization_tab

    def confirm_operation(self, title, message):
        """M√©todo auxiliar para confirmar opera√ß√µes"""
        return messagebox.askyesno(title, message)

    def show_progress_dialog(self, title="Executando Otimiza√ß√£o"):
        """Criar janela de progresso"""
        progress_window = tk.Toplevel(self.parent.root)
        progress_window.title(title)
        progress_window.geometry("400x200")
        progress_window.transient(self.parent.root)
        progress_window.grab_set()

        # Centralizar janela
        progress_window.geometry(
            "+%d+%d"
            % (
                progress_window.winfo_screenwidth() // 2 - 200,
                progress_window.winfo_screenheight() // 2 - 100,
            )
        )

        # Label de status
        status_label = ttk_bs.Label(
            progress_window, text="Executando otimiza√ß√µes...", font=("Arial", 12)
        )
        status_label.pack(pady=20)

        # Barra de progresso indeterminada
        progress_bar = ttk_bs.Progressbar(
            progress_window, mode="indeterminate", length=300
        )
        progress_bar.pack(pady=10)
        progress_bar.start()

        # Texto de log (scrollable)
        log_frame = ttk_bs.Frame(progress_window)
        log_frame.pack(fill=BOTH, expand=True, padx=20, pady=(0, 20))

        log_text = tk.Text(log_frame, height=6, wrap=tk.WORD)
        log_scrollbar = ttk_bs.Scrollbar(
            log_frame, orient="vertical", command=log_text.yview
        )
        log_text.configure(yscrollcommand=log_scrollbar.set)

        log_scrollbar.pack(side="right", fill="y")
        log_text.pack(side="left", fill="both", expand=True)

        return progress_window, status_label, progress_bar, log_text

    def update_log_text(self, log_text, message):
        """Atualizar texto do log de forma thread-safe"""

        def update():
            log_text.insert(tk.END, message + "\n")
            log_text.see(tk.END)
            log_text.update()

        # Agendar atualiza√ß√£o na thread principal
        log_text.after(0, update)

    def execute_optimization(self, optimization_type):
        """Executar otimiza√ß√£o espec√≠fica (m√©todo gen√©rico para fun√ß√µes n√£o implementadas)"""
        try:
            messagebox.showinfo(
                "Em Desenvolvimento",
                f"A otimiza√ß√£o '{optimization_type}' ser√° implementada em breve.\n\n"
                "Os scripts .bat correspondentes precisam ser convertidos para Python.",
            )
            self.log_activity(f"Tentativa de execu√ß√£o: {optimization_type}")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao executar otimiza√ß√£o: {str(e)}")
            self.log_activity(f"Erro em {optimization_type}: {str(e)}")

    def log_activity(self, message):
        """Registrar atividade no log"""
        if hasattr(self, "logger") and self.logger:
            self.logger.log(message)

    # M√©todos das 11 op√ß√µes de otimiza√ß√£o
    def disable_windows_services(self):
        if self.confirm_operation(
            "Desabilitar Servi√ßos do Windows",
            "Esta opera√ß√£o ir√° desabilitar servi√ßos desnecess√°rios do Windows.\n\n"
            "‚ö†Ô∏è Esta fun√ß√£o √© IRREVERS√çVEL sem um ponto de restaura√ß√£o!\n\n"
            "Deseja continuar?",
        ):
            self.execute_optimization("disable_services")

    def disable_scheduled_tasks(self):
        """Desabilitar Tarefas Agendadas usando o m√≥dulo DesabilitadorTweaks"""
        if not self.confirm_operation(
            "Desabilitar Tarefas Agendadas",
            "Esta opera√ß√£o ir√° desabilitar tarefas agendadas desnecess√°rias:\n\n"
            "‚Ä¢ Tarefas de telemetria e coleta de dados\n"
            "‚Ä¢ Customer Experience Improvement Program\n"
            "‚Ä¢ Diagn√≥sticos e manuten√ß√£o autom√°tica\n"
            "‚Ä¢ Tarefas do Microsoft Office\n"
            "‚Ä¢ Atualiza√ß√µes autom√°ticas do Edge\n"
            "‚Ä¢ File History e outras tarefas\n"
            "‚Ä¢ E diversas outras tarefas que consomem recursos...\n\n"
            "‚ö†Ô∏è Esta fun√ß√£o √© IRREVERS√çVEL sem um ponto de restaura√ß√£o!\n"
            "‚ö†Ô∏è Execute como Administrador para melhores resultados!\n\n"
            "Deseja continuar?",
        ):
            return

        # Verificar se o m√≥dulo est√° dispon√≠vel
        if DesabilitadorTweaks is None:
            messagebox.showerror(
                "Erro",
                "M√≥dulo de desabilita√ß√£o de tarefas n√£o encontrado!\n\n"
                "Verifique se o arquivo 'core/desabilitar_tweaks.py' existe.",
            )
            return

        # Criar janela de progresso
        progress_window, status_label, progress_bar, log_text = (
            self.show_progress_dialog("Desabilitando Tarefas Agendadas")
        )

        def run_scheduled_tasks_disable():
            """Executar desabilita√ß√£o de tarefas em thread separada"""
            try:
                # Criar logger personalizado para capturar as mensagens
                class ProgressLogger:
                    def __init__(self, log_widget):
                        self.log_widget = log_widget

                    def log(self, message):
                        # Atualizar o log text widget de forma thread-safe
                        self.log_widget.after(0, lambda: self.update_log(message))

                    def update_log(self, message):
                        self.log_widget.insert(tk.END, message + "\n")
                        self.log_widget.see(tk.END)
                        self.log_widget.update()

                # Criar desabilitador com logger personalizado
                progress_logger = ProgressLogger(log_text)
                desabilitador = DesabilitadorTweaks(logger=progress_logger)

                # Atualizar status
                status_label.after(
                    0,
                    lambda: status_label.config(
                        text="Desabilitando tarefas agendadas..."
                    ),
                )

                # Executar desabilita√ß√£o
                success, sucessos, erros = desabilitador.executar_desabilitacao_tweaks()

                # Mostrar resultado final
                def show_result():
                    progress_bar.stop()

                    if success and len(erros) == 0:
                        status_label.config(
                            text="‚úÖ Tarefas desabilitadas com sucesso!"
                        )
                        result_message = (
                            f"üéâ TAREFAS AGENDADAS DESABILITADAS COM SUCESSO!\n\n"
                        )
                        result_message += f"‚úÖ {len(sucessos)} tarefas processadas\n\n"
                        result_message += "üìÖ TAREFAS DESABILITADAS:\n"
                        result_message += "‚Ä¢ Telemetria e coleta de dados removida\n"
                        result_message += "‚Ä¢ Customer Experience Program desabilitado\n"
                        result_message += "‚Ä¢ Diagn√≥sticos autom√°ticos parados\n"
                        result_message += (
                            "‚Ä¢ Atualiza√ß√µes autom√°ticas do Office/Edge desabilitadas\n"
                        )
                        result_message += "‚Ä¢ Tarefas de manuten√ß√£o otimizadas\n\n"
                        result_message += "‚ö†Ô∏è IMPORTANTE: Reinicie o sistema para aplicar todas as mudan√ßas!"

                        # Fechar janela de progresso ap√≥s 3 segundos
                        progress_window.after(3000, progress_window.destroy)

                        messagebox.showinfo("Tarefas Desabilitadas", result_message)

                    elif len(sucessos) > len(erros):
                        status_label.config(text="‚ö†Ô∏è Conclu√≠do com alguns avisos")
                        result_message = f"‚ö†Ô∏è TAREFAS PARCIALMENTE DESABILITADAS\n\n"
                        result_message += f"‚úÖ Sucessos: {len(sucessos)}\n"
                        result_message += f"‚ö†Ô∏è Avisos/Erros: {len(erros)}\n\n"
                        result_message += (
                            "üìÖ A maior parte das tarefas foi desabilitada.\n\n"
                        )
                        result_message += "Detalhes dos erros:\n"
                        for erro in erros[:5]:  # Mostrar apenas os primeiros 5 erros
                            result_message += f"‚Ä¢ {erro}\n"
                        if len(erros) > 5:
                            result_message += f"... e mais {len(erros) - 5} erros\n"
                        result_message += "\n‚ö†Ô∏è IMPORTANTE: Reinicie o sistema!"

                        progress_window.after(2000, progress_window.destroy)
                        messagebox.showwarning("Desabilita√ß√£o Parcial", result_message)

                    else:
                        status_label.config(text="‚ùå Conclu√≠do com v√°rios erros")
                        result_message = f"‚ùå MUITOS ERROS NA DESABILITA√á√ÉO\n\n"
                        result_message += f"‚úÖ Sucessos: {len(sucessos)}\n"
                        result_message += f"‚ùå Erros: {len(erros)}\n\n"
                        result_message += "Principais erros:\n"
                        for erro in erros[:3]:
                            result_message += f"‚Ä¢ {erro}\n"
                        result_message += (
                            f"\nVerifique se est√° executando como Administrador!"
                        )

                        progress_window.after(2000, progress_window.destroy)
                        messagebox.showerror("Erros na Desabilita√ß√£o", result_message)

                    # Log da atividade
                    self.log_activity(
                        f"Desabilita√ß√£o de tarefas: {len(sucessos)} sucessos, {len(erros)} erros"
                    )

                # Agendar para thread principal
                progress_window.after(500, show_result)

            except Exception as e:

                def show_error():
                    progress_bar.stop()
                    status_label.config(text="‚ùå Erro cr√≠tico")
                    progress_window.after(1000, progress_window.destroy)
                    messagebox.showerror(
                        "Erro Cr√≠tico",
                        f"Erro cr√≠tico durante a desabilita√ß√£o:\n\n{str(e)}",
                    )
                    self.log_activity(
                        f"Erro cr√≠tico na desabilita√ß√£o de tarefas: {str(e)}"
                    )

                progress_window.after(0, show_error)

        # Executar em thread separada para n√£o travar a interface
        thread = threading.Thread(target=run_scheduled_tasks_disable, daemon=True)
        thread.start()

    def disable_windows_software(self):
        if self.confirm_operation(
            "Desabilitar Softwares do Windows",
            "Esta opera√ß√£o ir√° desabilitar aplicativos e softwares desnecess√°rios.\n\n"
            "‚ö†Ô∏è Esta fun√ß√£o √© IRREVERS√çVEL sem um ponto de restaura√ß√£o!\n\n"
            "Deseja continuar?",
        ):
            self.execute_optimization("disable_windows_software")

# core/otimizar_edge.py - Otimiza√ß√µes para o Microsoft Edge

import winreg
import os


class OtimizadorEdge:
    """Classe para aplicar otimiza√ß√µes espec√≠ficas do Microsoft Edge"""

    def __init__(self, logger=None):
        """Inicializar otimizador do Edge"""
        self.logger = logger

        # Configura√ß√µes de registro para otimizar o Edge
        self.configuracoes_edge = [
            {
                "hive": winreg.HKEY_LOCAL_MACHINE,
                "path": r"SOFTWARE\Policies\Microsoft\Edge",
                "name": "HubsSidebarEnabled",
                "type": winreg.REG_DWORD,
                "value": 0,
                "description": "Desabilitar sidebar do Edge (bot√£o Bing)",
            },
            {
                "hive": winreg.HKEY_LOCAL_MACHINE,
                "path": r"SOFTWARE\Policies\Microsoft\Edge",
                "name": "BackgroundModeEnabled",
                "type": winreg.REG_DWORD,
                "value": 0,
                "description": "Desabilitar Edge executando em segundo plano",
            },
            {
                "hive": winreg.HKEY_LOCAL_MACHINE,
                "path": r"SOFTWARE\Policies\Microsoft\Edge",
                "name": "StartupBoostEnabled",
                "type": winreg.REG_DWORD,
                "value": 0,
                "description": "Desabilitar Edge iniciar automaticamente com Windows",
            },
            {
                "hive": winreg.HKEY_LOCAL_MACHINE,
                "path": r"SOFTWARE\Policies\Microsoft\Edge",
                "name": "EfficiencyMode",
                "type": winreg.REG_DWORD,
                "value": 0,
                "description": "Desabilitar modo de efici√™ncia autom√°tico",
            },
            {
                "hive": winreg.HKEY_LOCAL_MACHINE,
                "path": r"SOFTWARE\Policies\Microsoft\Edge",
                "name": "ShowAcrobatSubscriptionButton",
                "type": winreg.REG_DWORD,
                "value": 0,
                "description": "Remover bot√£o de assinatura do Acrobat",
            },
            {
                "hive": winreg.HKEY_LOCAL_MACHINE,
                "path": r"SOFTWARE\Policies\Microsoft\Edge",
                "name": "DefaultGeolocationSetting",
                "type": winreg.REG_DWORD,
                "value": 2,
                "description": "Desabilitar geolocaliza√ß√£o por padr√£o",
            },
            {
                "hive": winreg.HKEY_LOCAL_MACHINE,
                "path": r"SOFTWARE\Policies\Microsoft\Edge",
                "name": "DefaultSensorsSetting",
                "type": winreg.REG_DWORD,
                "value": 2,
                "description": "Desabilitar acesso a sensores por padr√£o",
            },
            {
                "hive": winreg.HKEY_LOCAL_MACHINE,
                "path": r"SOFTWARE\Policies\Microsoft\Edge",
                "name": "DefaultNotificationsSetting",
                "type": winreg.REG_DWORD,
                "value": 2,
                "description": "Desabilitar notifica√ß√µes de sites por padr√£o",
            },
        ]

    def log(self, message):
        """Registrar mensagem no log"""
        if self.logger:
            self.logger.log(message)
        else:
            print(message)

    def verificar_permissoes_admin(self):
        """Verificar se est√° executando como administrador"""
        try:
            return os.getuid() == 0
        except AttributeError:
            # Windows
            try:
                return os.access(
                    os.path.join(
                        os.environ.get("SystemRoot", "C:\\Windows"), "system32"
                    ),
                    os.W_OK,
                )
            except:
                return False

    def criar_chave_se_necessario(self, hive, path):
        """Criar chave de registro se n√£o existir"""
        try:
            # Tentar abrir a chave primeiro
            key = winreg.OpenKey(hive, path, 0, winreg.KEY_WRITE)
            winreg.CloseKey(key)
            return True
        except FileNotFoundError:
            # Chave n√£o existe, tentar criar
            try:
                key = winreg.CreateKey(hive, path)
                winreg.CloseKey(key)
                return True
            except Exception as e:
                self.log(f"‚ùå Erro ao criar chave {path}: {str(e)}")
                return False
        except Exception as e:
            self.log(f"‚ùå Erro ao acessar chave {path}: {str(e)}")
            return False

    def aplicar_configuracao_registro(self, config):
        """Aplicar uma configura√ß√£o espec√≠fica no registro"""
        try:
            hive = config["hive"]
            path = config["path"]
            name = config["name"]
            reg_type = config["type"]
            value = config["value"]
            description = config["description"]

            self.log(f"Aplicando: {description}")

            # Criar chave se necess√°rio
            if not self.criar_chave_se_necessario(hive, path):
                return False

            # Abrir chave para escrita
            with winreg.OpenKey(hive, path, 0, winreg.KEY_WRITE) as key:
                winreg.SetValueEx(key, name, 0, reg_type, value)

            self.log(f"‚úÖ {description} - aplicada com sucesso")
            return True

        except PermissionError:
            self.log(f"‚ùå Sem permiss√£o para modificar: {config['description']}")
            self.log("   Execute como Administrador para aplicar esta configura√ß√£o")
            return False
        except Exception as e:
            self.log(f"‚ùå Erro ao aplicar {config['description']}: {str(e)}")
            return False

    def verificar_edge_instalado(self):
        """Verificar se o Microsoft Edge est√° instalado"""
        try:
            # Verificar se existe a chave do Edge no registro
            with winreg.OpenKey(
                winreg.HKEY_LOCAL_MACHINE,
                r"SOFTWARE\Microsoft\Edge",
                0,
                winreg.KEY_READ,
            ):
                return True
        except FileNotFoundError:
            return False
        except Exception:
            return False

    def executar_otimizacao_edge(self):
        """Executar otimiza√ß√£o completa do Microsoft Edge"""
        self.log("=== INICIANDO OTIMIZA√á√ÉO DO MICROSOFT EDGE ===")

        # Verificar se Edge est√° instalado
        if not self.verificar_edge_instalado():
            self.log("‚ö†Ô∏è AVISO: Microsoft Edge n√£o foi detectado no sistema")
            self.log("As configura√ß√µes ser√£o aplicadas mesmo assim para uso futuro")

        if not self.verificar_permissoes_admin():
            self.log("‚ö†Ô∏è AVISO: Execute como Administrador para melhores resultados!")
            self.log(
                "Algumas configura√ß√µes podem n√£o ser aplicadas sem privil√©gios elevados"
            )

        sucessos = []
        erros = []

        self.log("\n--- Aplicando Otimiza√ß√µes do Microsoft Edge ---")

        for config in self.configuracoes_edge:
            try:
                if self.aplicar_configuracao_registro(config):
                    sucessos.append(f"Otimiza√ß√£o aplicada: {config['description']}")
                else:
                    erros.append(f"Falha em: {config['description']}")
            except Exception as e:
                erros.append(f"Erro cr√≠tico em {config['description']}: {str(e)}")

        # Relat√≥rio final
        self.log("\n=== RELAT√ìRIO FINAL ===")
        self.log(f"‚úÖ Sucessos: {len(sucessos)}")
        self.log(f"‚ùå Erros: {len(erros)}")

        if len(erros) > 0:
            self.log("\n--- Detalhes dos Erros ---")
            for erro in erros:
                self.log(f"‚Ä¢ {erro}")

        # Consideramos sucesso se teve mais sucessos que erros
        sucesso_geral = len(sucessos) >= len(erros)

        if sucesso_geral:
            self.log("\nüéâ MICROSOFT EDGE OTIMIZADO COM SUCESSO!")
            self.log("‚ö†Ô∏è IMPORTANTE: Reinicie o Edge para aplicar todas as mudan√ßas!")
            self.log("\nüìã OTIMIZA√á√ïES APLICADAS:")
            self.log("‚Ä¢ Sidebar/bot√£o Bing desabilitado")
            self.log("‚Ä¢ Execu√ß√£o em segundo plano desabilitada")
            self.log("‚Ä¢ Inicializa√ß√£o autom√°tica desabilitada")
            self.log("‚Ä¢ Bot√£o Acrobat removido")
            self.log("‚Ä¢ Permiss√µes de privacidade otimizadas")
            self.log("‚Ä¢ Geolocaliza√ß√£o desabilitada por padr√£o")
            self.log("‚Ä¢ Notifica√ß√µes de sites desabilitadas")
        else:
            self.log("\n‚ö†Ô∏è OTIMIZA√á√ÉO CONCLU√çDA COM ERROS")
            self.log("Execute como Administrador e verifique se o Edge est√° instalado")

        return sucesso_geral, sucessos, erros


# Fun√ß√£o principal para teste
def main():
    """Fun√ß√£o principal para testar o otimizador"""
    print("=== TESTE DO OTIMIZADOR DO EDGE ===")

    class SimpleLogger:
        def log(self, message):
            print(message)

    otimizador = OtimizadorEdge(logger=SimpleLogger())
    sucesso, sucessos, erros = otimizador.executar_otimizacao_edge()

    print(f"\nResultado: {'Sucesso' if sucesso else 'Falhou'}")
    print(f"Sucessos: {len(sucessos)}, Erros: {len(erros)}")


if __name__ == "__main__":
    main()
